name: Build and Push Docker Image

on:
  workflow_dispatch:
  # Déclenche lors d'un push sur la branche main ou un tag versionné
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # Par exemple, v1.0.0


jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE_NAME: gestionloyer-app  # Nom de l'image Docker
      DOCKER_USERNAME: kewou
      DOCKER_REPO_NAME: gestionloyer-repo
    
    
    steps:
      # Step 1: Checkout le code source
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Configurer Java (Java 11)
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      # Step 8: Configuration SMTP
      - name: Configuration SMTP
        run: |
          sed -i "s/spring.mail.username=.*/spring.mail.username=${{ secrets.SMTP_USERNAME }}/" src/main/resources/application.properties
          sed -i "s/spring.mail.password=.*/spring.mail.password=${{ secrets.SMTP_PASSWORD }}/" src/main/resources/application.properties          

      # Step 3: Construire le projet avec Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 4: Se connecter à Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Construire l'image Docker
      - name: Build Docker image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:$VERSION . 

      # Step 5: Afficher le nom et la version de l'image
      - name: Show Docker image name and version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "docker image" ${{ env.DOCKER_IMAGE_NAME }}:$VERSION

      # Step 6: Taguer et pousser l'image dans Docker Hub
      - name: Push Docker image
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:$VERSION ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:$VERSION
          docker image push ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:$VERSION

      # Step 7: Configuration credentials
      - name: Set up credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      # Step 8: SSH
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-passphrase: ${{ secrets.SSH_PASSPHRASE }}


      # Step 9: Déploiement de l'image docker sur l'EC2 d'AWS
      - name: Deploy to AWS EC2
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          ssh -o StrictHostKeyChecking=no ubuntu@ec2-13-37-244-5.eu-west-3.compute.amazonaws.com  << 'EOF'
          docker stop BACKEND_container || true
          docker rm BACKEND_container || true
          docker rmi -f ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:$VERSION
          docker pull ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:$VERSION
          docker run -d --name BACKEND_container -p 8080:8080 ${{ env.DOCKER_USERNAME }}/${{ env.DOCKER_REPO_NAME }}:$VERSION
          EOF